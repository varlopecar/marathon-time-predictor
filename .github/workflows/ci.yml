name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run linting
        run: |
          flake8 marathon_prediction.py marathon_api.py tests/ --max-line-length=88 --extend-ignore=E203,W503
          black --check marathon_prediction.py marathon_api.py tests/
          isort --check-only marathon_prediction.py marathon_api.py tests/

      - name: Run type checking
        run: |
          mypy marathon_prediction.py marathon_api.py --ignore-missing-imports

      - name: Run security checks
        run: |
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run tests
        run: |
          pytest tests/ -v --cov=marathon_prediction --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and test Docker image
        run: |
          docker build --target testing -t marathon-predictor-test .
          docker run marathon-predictor-test

      - name: Build production Docker image
        run: |
          docker build --target production -t marathon-predictor .

  api-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Start API server
        run: |
          python marathon_api.py &
          sleep 10

      - name: Test API endpoints
        run: |
          python test_simple_api.py

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker, api-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          echo "This is a placeholder for actual deployment logic"
